{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Landon Schlangen\\\\Documents\\\\WebDevelopmentFolders\\\\FullStackApps\\\\TradingPractice\\\\client\\\\trading-app\\\\src\\\\components\\\\Buy.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport Navbar from './Navbar';\nimport useHttpGet from '../hooks/httpGet';\nimport BuyStocks from './BuyStocks';\n\nfunction Buy(props) {\n  const [stocks] = useHttpGet(`http://localhost:5000/api/stocks`, [], 'getting stocks');\n  const [user] = useHttpGet(`http://localhost:5000/api/users/${sessionStorage.getItem('username')}`, [], 'getting user ' + sessionStorage.getItem('username'));\n  const [stocksOwned] = useHttpGet(`http://localhost:5000/api/own/${sessionStorage.getItem('username')}`, [], 'getting stocks Owned for ' + sessionStorage.getItem('username'));\n  const [boughtMessage, setBoughtMessage] = useState([{\n    name: 'aapl',\n    message: \"message\"\n  }]);\n  useEffect(() => {\n    fetchTable();\n  }, dependencies);\n  /**\r\n   * handle the logout sequence when a user clicks on logout on the Navbar. \r\n   * first remove the user from the session, then move handleLogout() up to app.js, then redirect to the home page.\r\n   */\n\n  const handleLogout = () => {\n    sessionStorage.removeItem('username');\n    props.handleLogout();\n    props.history.push('/');\n  };\n  /**\r\n   * \r\n   * @param {the name of the stock} name 'aapl'\r\n   * @param {the amount wanting to buy} amountToBuy 10\r\n   * @param {the current price of the stock} price_now 172.32\r\n   * \r\n   * If the stock that is being bought is already in the users portfolio, just do an update on the postition, \r\n   * If the stock is not in the users portfolio, create a new stock in the users dashboard.\r\n   */\n\n\n  const handleBuy = async (name, amountToBuy, price_now) => {\n    //Make new Stock if not owned already\n    const stocknamesOwned = [];\n    stocksOwned.forEach(stock => {\n      stocknamesOwned.push(stock.name);\n    });\n\n    if (!stocknamesOwned.includes(name)) {\n      await createNewStockInPortfolio(name, amountToBuy, price_now); //quit excution of the function after this point.\n\n      return \"hello\";\n    } //update stock if owned already\n\n\n    await updateStockInPortfolio(name, amountToBuy, price_now);\n  };\n\n  const createNewStockInPortfolio = async (name, amountToBuy, price_now) => {\n    console.log(\"ran handle buy\");\n    console.log(amountToBuy); //make a new owned in order to create data on a new stock with price_bought_at and price_now included.\n\n    const NewOwned = {\n      username: sessionStorage.getItem('username'),\n      name: name,\n      price_bought_at: price_now,\n      price_now: price_now,\n      amount: amountToBuy\n    };\n    const myResponse = await fetch(`http://localhost:5000/api/owns`, {\n      method: 'POST',\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'omit',\n      // include, *same-origin, omit\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrerPolicy: 'no-referrer',\n      // no-referrer, *client\n      body: JSON.stringify(NewOwned)\n    });\n    const jsonData = await myResponse.json();\n    console.log(jsonData);\n\n    if (jsonData.success) {\n      setBoughtMessage();\n    }\n  };\n\n  const updateStockInPortfolio = async (name, amountToBuy, price_now) => {\n    //update stock if owned already\n    const updateThis = {\n      username: sessionStorage.getItem('username'),\n      name: name,\n      amount: amountToBuy\n    };\n    const myResponse = await fetch(`http://localhost:5000/api/owns`, {\n      method: 'Put',\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'omit',\n      // include, *same-origin, omit\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrerPolicy: 'no-referrer',\n      // no-referrer, *client\n      body: JSON.stringify(updateThis)\n    });\n    const jsonData = await myResponse.json();\n    console.log(jsonData);\n\n    if (jsonData.success) {\n      setBoughtMessage();\n    }\n  };\n\n  if (!props.username) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    });\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      user: props.username,\n      handleLogout: handleLogout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, \"Money: \", user.dollars), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(BuyStocks, {\n      buyStocks: stocks,\n      handleClick: handleBuy,\n      boughtMessage: boughtMessage,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    })));\n  }\n}\n\nexport default Buy;","map":{"version":3,"sources":["C:/Users/Landon Schlangen/Documents/WebDevelopmentFolders/FullStackApps/TradingPractice/client/trading-app/src/components/Buy.jsx"],"names":["React","useEffect","useState","Navbar","useHttpGet","BuyStocks","Buy","props","stocks","user","sessionStorage","getItem","stocksOwned","boughtMessage","setBoughtMessage","name","message","fetchTable","dependencies","handleLogout","removeItem","history","push","handleBuy","amountToBuy","price_now","stocknamesOwned","forEach","stock","includes","createNewStockInPortfolio","updateStockInPortfolio","console","log","NewOwned","username","price_bought_at","amount","myResponse","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","jsonData","json","success","updateThis","dollars"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,QAAM,CAACC,MAAD,IAAWJ,UAAU,CACxB,kCADwB,EAEzB,EAFyB,EAGzB,gBAHyB,CAA3B;AAKA,QAAM,CAACK,IAAD,IAASL,UAAU,CACpB,mCAAkCM,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAmC,EADjD,EAErB,EAFqB,EAGrB,kBAAkBD,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAHG,CAAzB;AAKA,QAAM,CAACC,WAAD,IAAgBR,UAAU,CAC7B,iCAAgCM,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAmC,EADtC,EAE9B,EAF8B,EAG9B,8BAA8BD,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAHA,CAAhC;AAKA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCZ,QAAQ,CAAC,CACjD;AAACa,IAAAA,IAAI,EAAE,MAAP;AAAeC,IAAAA,OAAO,EAAE;AAAxB,GADiD,CAAD,CAAlD;AAIAf,EAAAA,SAAS,CAAC,MAAI;AACZgB,IAAAA,UAAU;AACb,GAFU,EAERC,YAFQ,CAAT;AAGA;;;;;AAIA,QAAMC,YAAY,GAAG,MAAM;AACzBT,IAAAA,cAAc,CAACU,UAAf,CAA0B,UAA1B;AACAb,IAAAA,KAAK,CAACY,YAAN;AACAZ,IAAAA,KAAK,CAACc,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,GAJD;AAMA;;;;;;;;;;;AASA,QAAMC,SAAS,GAAG,OAAOR,IAAP,EAAaS,WAAb,EAA0BC,SAA1B,KAAwC;AAExD;AACA,UAAMC,eAAe,GAAG,EAAxB;AACAd,IAAAA,WAAW,CAACe,OAAZ,CAAoBC,KAAK,IAAI;AAE3BF,MAAAA,eAAe,CAACJ,IAAhB,CAAqBM,KAAK,CAACb,IAA3B;AAED,KAJD;;AAKF,QAAG,CAACW,eAAe,CAACG,QAAhB,CAAyBd,IAAzB,CAAJ,EAAmC;AACjC,YAAMe,yBAAyB,CAACf,IAAD,EAAOS,WAAP,EAAoBC,SAApB,CAA/B,CADiC,CAEjC;;AACA,aAAO,OAAP;AACD,KAbyD,CAcxD;;;AACA,UAAMM,sBAAsB,CAAChB,IAAD,EAAOS,WAAP,EAAoBC,SAApB,CAA5B;AAED,GAjBD;;AAmBA,QAAMK,yBAAyB,GAAG,OAAOf,IAAP,EAAaS,WAAb,EAA0BC,SAA1B,KAAwC;AACxEO,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACID,IAAAA,OAAO,CAACC,GAAR,CAAYT,WAAZ,EAFoE,CAGpE;;AACA,UAAMU,QAAQ,GAAG;AACfC,MAAAA,QAAQ,EAAEzB,cAAc,CAACC,OAAf,CAAuB,UAAvB,CADK;AAEfI,MAAAA,IAAI,EAAEA,IAFS;AAGfqB,MAAAA,eAAe,EAAEX,SAHF;AAIfA,MAAAA,SAAS,EAAEA,SAJI;AAKfY,MAAAA,MAAM,EAAEb;AALO,KAAjB;AASA,UAAMc,UAAU,GAAG,MAAMC,KAAK,CACzB,gCADyB,EACQ;AAC9BC,MAAAA,MAAM,EAAE,MADsB;AAE9BC,MAAAA,IAAI,EAAE,MAFwB;AAEhB;AACdC,MAAAA,KAAK,EAAE,UAHuB;AAGX;AACnBC,MAAAA,WAAW,EAAE,MAJiB;AAIT;AACrBC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB,OALqB;AAM9BC,MAAAA,QAAQ,EAAE,QANoB;AAMV;AACpBC,MAAAA,cAAc,EAAE,aAPc;AAOC;AAC/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAef,QAAf;AARwB,KADR,CAA9B;AAYA,UAAMgB,QAAQ,GAAG,MAAMZ,UAAU,CAACa,IAAX,EAAvB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ;;AACA,QAAGA,QAAQ,CAACE,OAAZ,EAAoB;AAClBtC,MAAAA,gBAAgB;AACjB;AAGN,GAhCD;;AAkCA,QAAMiB,sBAAsB,GAAG,OAAOhB,IAAP,EAAaS,WAAb,EAA0BC,SAA1B,KAAwC;AACrE;AACA,UAAM4B,UAAU,GAAG;AACjBlB,MAAAA,QAAQ,EAAEzB,cAAc,CAACC,OAAf,CAAuB,UAAvB,CADO;AAEjBI,MAAAA,IAAI,EAAEA,IAFW;AAGjBsB,MAAAA,MAAM,EAAEb;AAHS,KAAnB;AAOA,UAAMc,UAAU,GAAG,MAAMC,KAAK,CACzB,gCADyB,EACQ;AAC9BC,MAAAA,MAAM,EAAE,KADsB;AAE9BC,MAAAA,IAAI,EAAE,MAFwB;AAEhB;AACdC,MAAAA,KAAK,EAAE,UAHuB;AAGX;AACnBC,MAAAA,WAAW,EAAE,MAJiB;AAIT;AACrBC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB,OALqB;AAM9BC,MAAAA,QAAQ,EAAE,QANoB;AAMV;AACpBC,MAAAA,cAAc,EAAE,aAPc;AAOC;AAC/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeI,UAAf;AARwB,KADR,CAA9B;AAWI,UAAMH,QAAQ,GAAG,MAAMZ,UAAU,CAACa,IAAX,EAAvB;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAZ;;AACA,QAAGA,QAAQ,CAACE,OAAZ,EAAoB;AAClBtC,MAAAA,gBAAgB;AACjB;AACN,GAzBD;;AA4BA,MAAI,CAACP,KAAK,CAAC4B,QAAX,EAAqB;AACnB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO;AACL,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAE5B,KAAK,CAAC4B,QAApB;AAA8B,MAAA,YAAY,EAAEhB,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAYV,IAAI,CAAC6C,OAAjB,CAFF,EAGE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAI9C,MAAxB;AAAgC,MAAA,WAAW,EAAIe,SAA/C;AAA0D,MAAA,aAAa,EAAIV,aAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAHF,CADF;AASD;AACF;;AAED,eAAeP,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navbar from './Navbar';\r\nimport useHttpGet from '../hooks/httpGet';\r\nimport BuyStocks from './BuyStocks';\r\n\r\nfunction Buy(props) {\r\n  const [stocks] = useHttpGet(\r\n    `http://localhost:5000/api/stocks`,\r\n    [],\r\n    'getting stocks'\r\n  );\r\n  const [user] = useHttpGet(\r\n      `http://localhost:5000/api/users/${sessionStorage.getItem('username')}`,\r\n      [],\r\n      'getting user ' + sessionStorage.getItem('username')\r\n    )\r\n  const [stocksOwned] = useHttpGet(\r\n    `http://localhost:5000/api/own/${sessionStorage.getItem('username')}`,\r\n    [],\r\n    'getting stocks Owned for ' + sessionStorage.getItem('username')\r\n  )\r\n  const [boughtMessage, setBoughtMessage] = useState([\r\n    {name: 'aapl', message: \"message\"},\r\n    \r\n  ]);\r\n  useEffect(()=>{\r\n    fetchTable();\r\n}, dependencies)\r\n  /**\r\n   * handle the logout sequence when a user clicks on logout on the Navbar. \r\n   * first remove the user from the session, then move handleLogout() up to app.js, then redirect to the home page.\r\n   */\r\n  const handleLogout = () => {\r\n    sessionStorage.removeItem('username');\r\n    props.handleLogout();\r\n    props.history.push('/');\r\n  };\r\n\r\n  /**\r\n   * \r\n   * @param {the name of the stock} name 'aapl'\r\n   * @param {the amount wanting to buy} amountToBuy 10\r\n   * @param {the current price of the stock} price_now 172.32\r\n   * \r\n   * If the stock that is being bought is already in the users portfolio, just do an update on the postition, \r\n   * If the stock is not in the users portfolio, create a new stock in the users dashboard.\r\n   */\r\n  const handleBuy = async (name, amountToBuy, price_now) => {\r\n\r\n    //Make new Stock if not owned already\r\n    const stocknamesOwned = [];\r\n    stocksOwned.forEach(stock => {\r\n      \r\n      stocknamesOwned.push(stock.name);\r\n\r\n    })\r\n  if(!stocknamesOwned.includes(name)){\r\n    await createNewStockInPortfolio(name, amountToBuy, price_now);\r\n    //quit excution of the function after this point.\r\n    return \"hello\";\r\n  }\r\n    //update stock if owned already\r\n    await updateStockInPortfolio(name, amountToBuy, price_now);\r\n    \r\n  }\r\n \r\n  const createNewStockInPortfolio = async (name, amountToBuy, price_now) => {\r\n    console.log(\"ran handle buy\");\r\n        console.log(amountToBuy);\r\n        //make a new owned in order to create data on a new stock with price_bought_at and price_now included.\r\n        const NewOwned = {\r\n          username: sessionStorage.getItem('username'),\r\n          name: name,\r\n          price_bought_at: price_now,\r\n          price_now: price_now,\r\n          amount: amountToBuy\r\n        };\r\n    \r\n    \r\n        const myResponse = await fetch(\r\n            `http://localhost:5000/api/owns`, {\r\n                method: 'POST',\r\n                mode: 'cors', // no-cors, *cors, same-origin\r\n                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n                credentials: 'omit', // include, *same-origin, omit\r\n                headers: {\"content-type\":\"application/json\"},\r\n                redirect: 'follow', // manual, *follow, error\r\n                referrerPolicy: 'no-referrer', // no-referrer, *client\r\n                body: JSON.stringify(NewOwned)\r\n            });\r\n\r\n        const jsonData = await myResponse.json();\r\n        console.log(jsonData);\r\n        if(jsonData.success){\r\n          setBoughtMessage();\r\n        }\r\n    \r\n      \r\n  }\r\n\r\n  const updateStockInPortfolio = async (name, amountToBuy, price_now) => {\r\n    //update stock if owned already\r\n    const updateThis = {\r\n      username: sessionStorage.getItem('username'),\r\n      name: name,\r\n      amount: amountToBuy\r\n    };\r\n    \r\n    \r\n    const myResponse = await fetch(\r\n        `http://localhost:5000/api/owns`, {\r\n            method: 'Put',\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'omit', // include, *same-origin, omit\r\n            headers: {\"content-type\":\"application/json\"},\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrerPolicy: 'no-referrer', // no-referrer, *client\r\n            body: JSON.stringify(updateThis)\r\n        });\r\n        const jsonData = await myResponse.json();\r\n        console.log(jsonData);\r\n        if(jsonData.success){\r\n          setBoughtMessage();\r\n        }\r\n  }\r\n\r\n\r\n  if (!props.username) {\r\n    return <div></div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <Navbar user={props.username} handleLogout={handleLogout} />\r\n        <h3>Money: {user.dollars}</h3>\r\n        <div className='container'>\r\n          <BuyStocks buyStocks = {stocks} handleClick = {handleBuy} boughtMessage = {boughtMessage}/>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buy;\r\n"]},"metadata":{},"sourceType":"module"}