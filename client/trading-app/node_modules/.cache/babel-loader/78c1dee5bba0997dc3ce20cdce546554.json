{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Landon Schlangen\\\\Documents\\\\WebDevelopmentFolders\\\\FullStackApps\\\\TradingPractice\\\\client\\\\trading-app\\\\src\\\\components\\\\Buy.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport Navbar from './Navbar';\nimport useHttpGet from '../hooks/httpGet';\nimport BuyStocks from './BuyStocks';\n\nfunction Buy(props) {\n  // const [stocks] = useHttpGet(\n  //   `http://localhost:5000/api/stocks`,\n  //   [],\n  //   'getting stocks'\n  //   );\n  const [seconds, setSeconds] = useState(0);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setSeconds(seconds => seconds + 1);\n    }, 7000);\n    return () => clearInterval(interval);\n  }, []);\n  const [query, setQuery] = useState('');\n  const [stocks] = useHttpGet(`http://localhost:5000/api/stocks/${query}`, [query, seconds], 'getting stocks');\n\n  const handleChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const [user] = useHttpGet(`http://localhost:5000/api/users/${sessionStorage.getItem('username')}`, [], 'getting user ' + sessionStorage.getItem('username'));\n  const [stocksOwned] = useHttpGet(`http://localhost:5000/api/own/${sessionStorage.getItem('username')}`, [], 'getting stocks Owned for ' + sessionStorage.getItem('username'));\n  /**\r\n   * handle the logout sequence when a user clicks on logout on the Navbar.\r\n   * first remove the user from the session, then move handleLogout() up to app.js, then redirect to the home page.\r\n   */\n\n  const handleLogout = () => {\n    sessionStorage.removeItem('username');\n    props.handleLogout();\n    props.history.push('/');\n  };\n  /**\r\n   *\r\n   * @param {the name of the stock} name 'aapl'\r\n   * @param {the amount wanting to buy} amountToBuy 10\r\n   * @param {the current price of the stock} price_now 172.32\r\n   *\r\n   * If the stock that is being bought is already in the users portfolio, just do an update on the postition,\r\n   * If the stock is not in the users portfolio, create a new stock in the users dashboard.\r\n   */\n\n\n  const handleBuy = async (name, amountToBuy, price_now) => {\n    const dollars = amountToBuy * parseFloat(price_now.replace(/[^0-9.]/g, \"\"));\n    const dollarsOnHand = parseFloat(user.dollars.replace(/[^0-9.]/g, \"\"));\n\n    if (amountToBuy < 0) {\n      alert(\"You can't buy a negative amount of stocks, silly.\");\n      return 'End';\n    }\n\n    console.log(dollars, dollarsOnHand);\n\n    if (dollars > dollarsOnHand) {\n      alert(\"You don't have enough money for that, silly.\");\n      return 'End';\n    } //Make new Stock if not owned already\n\n\n    const stocknamesOwned = [];\n    stocksOwned.forEach(stock => {\n      stocknamesOwned.push(stock.name);\n    });\n\n    if (!stocknamesOwned.includes(name)) {\n      await createNewStockInPortfolio(name, amountToBuy, price_now);\n      window.location.reload(); //quit excution of the function after this point.\n\n      return 'hello';\n    } //update stock if owned already\n\n\n    let own = {};\n    stocksOwned.forEach(stock => {\n      if (stock.name == name) {\n        own = stock;\n      }\n    });\n    await updateStockInPortfolio(name, amountToBuy, price_now, own); //update the amount of money in the users account\n\n    const updateThisToo = {\n      username: sessionStorage.getItem('username'),\n      dollars: -dollars,\n      premium_user: false\n    };\n    const myResponse2 = await fetch(`http://localhost:5000/api/users/${sessionStorage.getItem('username')}`, {\n      method: 'Put',\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'omit',\n      // include, *same-origin, omit\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrerPolicy: 'no-referrer',\n      // no-referrer, *client\n      body: JSON.stringify(updateThisToo)\n    });\n    const jsonData2 = await myResponse2.json();\n    console.log(jsonData2);\n    window.location.reload();\n  };\n\n  const createNewStockInPortfolio = async (name, amountToBuy, price_now) => {\n    console.log('ran handle buy');\n    console.log(amountToBuy); //make a new owned in order to create data on a new stock with price_bought_at and price_now included.\n\n    const NewOwned = {\n      username: sessionStorage.getItem('username'),\n      name: name,\n      price_bought_at: price_now,\n      price_now: price_now,\n      amount: amountToBuy\n    };\n    const myResponse = await fetch(`http://localhost:5000/api/owns`, {\n      method: 'POST',\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'omit',\n      // include, *same-origin, omit\n      headers: {\n        'content-type': 'application/json'\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrerPolicy: 'no-referrer',\n      // no-referrer, *client\n      body: JSON.stringify(NewOwned)\n    });\n    const jsonData = await myResponse.json();\n    console.log(jsonData);\n\n    if (jsonData.success) {\n      alert('you successfully purchased ' + amountToBuy + ' stock(s) of ' + name);\n    }\n  };\n\n  const updateStockInPortfolio = async (name, amountToBuy, price_now) => {\n    //update stock if owned already\n    const updateThis = {\n      username: sessionStorage.getItem('username'),\n      name: name,\n      amount: amountToBuy\n    };\n    const myResponse = await fetch(`http://localhost:5000/api/owns`, {\n      method: 'Put',\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'omit',\n      // include, *same-origin, omit\n      headers: {\n        'content-type': 'application/json'\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrerPolicy: 'no-referrer',\n      // no-referrer, *client\n      body: JSON.stringify(updateThis)\n    });\n    const jsonData = await myResponse.json();\n    console.log(jsonData);\n\n    if (jsonData.success) {\n      alert('you successfully purchased ' + amountToBuy + ' stock(s) of ' + name);\n    }\n  };\n\n  if (!props.username) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    });\n  } else {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      user: props.username,\n      handleLogout: handleLogout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \"Hello \", user.username), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Money: \", user.dollars), React.createElement(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      name: \"search\",\n      placeholder: \"Search\",\n      onChange: handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(BuyStocks, {\n      buyStocks: stocks,\n      handleClick: handleBuy,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    })));\n  }\n}\n\nexport default Buy;","map":{"version":3,"sources":["C:/Users/Landon Schlangen/Documents/WebDevelopmentFolders/FullStackApps/TradingPractice/client/trading-app/src/components/Buy.jsx"],"names":["React","useEffect","useState","Navbar","useHttpGet","BuyStocks","Buy","props","seconds","setSeconds","interval","setInterval","clearInterval","query","setQuery","stocks","handleChange","event","target","value","user","sessionStorage","getItem","stocksOwned","handleLogout","removeItem","history","push","handleBuy","name","amountToBuy","price_now","dollars","parseFloat","replace","dollarsOnHand","alert","console","log","stocknamesOwned","forEach","stock","includes","createNewStockInPortfolio","window","location","reload","own","updateStockInPortfolio","updateThisToo","username","premium_user","myResponse2","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","jsonData2","json","NewOwned","price_bought_at","amount","myResponse","jsonData","success","updateThis"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,CAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMS,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCF,MAAAA,UAAU,CAACD,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAV;AACD,KAF2B,EAEzB,IAFyB,CAA5B;AAGA,WAAO,MAAMI,aAAa,CAACF,QAAD,CAA1B;AACD,GALQ,EAKN,EALM,CAAT;AAOA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,MAAD,IAAWX,UAAU,CACxB,oCAAmCS,KAAM,EADjB,EAEzB,CAACA,KAAD,EAAQL,OAAR,CAFyB,EAGzB,gBAHyB,CAA3B;;AAQA,QAAMQ,YAAY,GAAGC,KAAK,IAAI;AAC5BH,IAAAA,QAAQ,CAACG,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAR;AACD,GAFD;;AAGA,QAAM,CAACC,IAAD,IAAShB,UAAU,CACtB,mCAAkCiB,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAmC,EAD/C,EAEvB,EAFuB,EAGvB,kBAAkBD,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAHK,CAAzB;AAKA,QAAM,CAACC,WAAD,IAAgBnB,UAAU,CAC7B,iCAAgCiB,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAmC,EADtC,EAE9B,EAF8B,EAG9B,8BAA8BD,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAHA,CAAhC;AAMA;;;;;AAIA,QAAME,YAAY,GAAG,MAAM;AACzBH,IAAAA,cAAc,CAACI,UAAf,CAA0B,UAA1B;AACAlB,IAAAA,KAAK,CAACiB,YAAN;AACAjB,IAAAA,KAAK,CAACmB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACD,GAJD;AAMA;;;;;;;;;;;AASA,QAAMC,SAAS,GAAG,OAAOC,IAAP,EAAaC,WAAb,EAA0BC,SAA1B,KAAwC;AACxD,UAAMC,OAAO,GAAGF,WAAW,GAAGG,UAAU,CAACF,SAAS,CAACG,OAAV,CAAkB,UAAlB,EAA8B,EAA9B,CAAD,CAAxC;AACA,UAAMC,aAAa,GAAGF,UAAU,CAACb,IAAI,CAACY,OAAL,CAAaE,OAAb,CAAqB,UAArB,EAAiC,EAAjC,CAAD,CAAhC;;AACA,QAAIJ,WAAW,GAAG,CAAlB,EAAqB;AACnBM,MAAAA,KAAK,CAAC,mDAAD,CAAL;AACA,aAAO,KAAP;AACD;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ,EAAqBG,aAArB;;AACA,QAAGH,OAAO,GAAGG,aAAb,EAA2B;AACzBC,MAAAA,KAAK,CAAC,8CAAD,CAAL;AACA,aAAO,KAAP;AACD,KAZuD,CAaxD;;;AACA,UAAMG,eAAe,GAAG,EAAxB;AACAhB,IAAAA,WAAW,CAACiB,OAAZ,CAAoBC,KAAK,IAAI;AAC3BF,MAAAA,eAAe,CAACZ,IAAhB,CAAqBc,KAAK,CAACZ,IAA3B;AACD,KAFD;;AAGA,QAAI,CAACU,eAAe,CAACG,QAAhB,CAAyBb,IAAzB,CAAL,EAAqC;AAGnC,YAAMc,yBAAyB,CAACd,IAAD,EAAOC,WAAP,EAAoBC,SAApB,CAA/B;AACAa,MAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB,GAJmC,CAKnC;;AACA,aAAO,OAAP;AACD,KAzBuD,CA0BxD;;;AACA,QAAIC,GAAG,GAAG,EAAV;AACExB,IAAAA,WAAW,CAACiB,OAAZ,CAAqBC,KAAD,IAAW;AAC7B,UAAGA,KAAK,CAACZ,IAAN,IAAcA,IAAjB,EAAsB;AACpBkB,QAAAA,GAAG,GAAGN,KAAN;AACD;AACF,KAJD;AAKF,UAAMO,sBAAsB,CAACnB,IAAD,EAAOC,WAAP,EAAoBC,SAApB,EAA+BgB,GAA/B,CAA5B,CAjCwD,CAmCxD;;AAEE,UAAME,aAAa,GAAG;AACpBC,MAAAA,QAAQ,EAAE7B,cAAc,CAACC,OAAf,CAAuB,UAAvB,CADU;AAEpBU,MAAAA,OAAO,EAAE,CAACA,OAFU;AAGpBmB,MAAAA,YAAY,EAAE;AAHM,KAAtB;AAOA,UAAMC,WAAW,GAAG,MAAMC,KAAK,CAC1B,mCAAkChC,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAmC,EAD3C,EAC8C;AACrEgC,MAAAA,MAAM,EAAE,KAD6D;AAErEC,MAAAA,IAAI,EAAE,MAF+D;AAEvD;AACdC,MAAAA,KAAK,EAAE,UAH8D;AAGlD;AACnBC,MAAAA,WAAW,EAAE,MAJwD;AAIhD;AACrBC,MAAAA,OAAO,EAAE;AAAC,wBAAe;AAAhB,OAL4D;AAMrEC,MAAAA,QAAQ,EAAE,QAN2D;AAMjD;AACpBC,MAAAA,cAAc,EAAE,aAPqD;AAOtC;AAC/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,aAAf;AAR+D,KAD9C,CAA/B;AAWI,UAAMe,SAAS,GAAG,MAAMZ,WAAW,CAACa,IAAZ,EAAxB;AACA5B,IAAAA,OAAO,CAACC,GAAR,CAAY0B,SAAZ;AACNpB,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,GA1DD;;AA4DA,QAAMH,yBAAyB,GAAG,OAAOd,IAAP,EAAaC,WAAb,EAA0BC,SAA1B,KAAwC;AACxEM,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYR,WAAZ,EAFwE,CAGxE;;AACA,UAAMoC,QAAQ,GAAG;AACfhB,MAAAA,QAAQ,EAAE7B,cAAc,CAACC,OAAf,CAAuB,UAAvB,CADK;AAEfO,MAAAA,IAAI,EAAEA,IAFS;AAGfsC,MAAAA,eAAe,EAAEpC,SAHF;AAIfA,MAAAA,SAAS,EAAEA,SAJI;AAKfqC,MAAAA,MAAM,EAAEtC;AALO,KAAjB;AAQA,UAAMuC,UAAU,GAAG,MAAMhB,KAAK,CAAE,gCAAF,EAAmC;AAC/DC,MAAAA,MAAM,EAAE,MADuD;AAE/DC,MAAAA,IAAI,EAAE,MAFyD;AAEjD;AACdC,MAAAA,KAAK,EAAE,UAHwD;AAG5C;AACnBC,MAAAA,WAAW,EAAE,MAJkD;AAI1C;AACrBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OALsD;AAM/DC,MAAAA,QAAQ,EAAE,QANqD;AAM3C;AACpBC,MAAAA,cAAc,EAAE,aAP+C;AAOhC;AAC/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeG,QAAf;AARyD,KAAnC,CAA9B;AAWA,UAAMI,QAAQ,GAAG,MAAMD,UAAU,CAACJ,IAAX,EAAvB;AACA5B,IAAAA,OAAO,CAACC,GAAR,CAAYgC,QAAZ;;AACA,QAAIA,QAAQ,CAACC,OAAb,EAAsB;AACpBnC,MAAAA,KAAK,CACH,gCAAgCN,WAAhC,GAA8C,eAA9C,GAAgED,IAD7D,CAAL;AAGD;AACF,GA9BD;;AAgCA,QAAMmB,sBAAsB,GAAG,OAAOnB,IAAP,EAAaC,WAAb,EAA0BC,SAA1B,KAAwC;AACrE;AACA,UAAMyC,UAAU,GAAG;AACjBtB,MAAAA,QAAQ,EAAE7B,cAAc,CAACC,OAAf,CAAuB,UAAvB,CADO;AAEjBO,MAAAA,IAAI,EAAEA,IAFW;AAGjBuC,MAAAA,MAAM,EAAEtC;AAHS,KAAnB;AAMA,UAAMuC,UAAU,GAAG,MAAMhB,KAAK,CAAE,gCAAF,EAAmC;AAC/DC,MAAAA,MAAM,EAAE,KADuD;AAE/DC,MAAAA,IAAI,EAAE,MAFyD;AAEjD;AACdC,MAAAA,KAAK,EAAE,UAHwD;AAG5C;AACnBC,MAAAA,WAAW,EAAE,MAJkD;AAI1C;AACrBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OALsD;AAM/DC,MAAAA,QAAQ,EAAE,QANqD;AAM3C;AACpBC,MAAAA,cAAc,EAAE,aAP+C;AAOhC;AAC/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeS,UAAf;AARyD,KAAnC,CAA9B;AAUA,UAAMF,QAAQ,GAAG,MAAMD,UAAU,CAACJ,IAAX,EAAvB;AACA5B,IAAAA,OAAO,CAACC,GAAR,CAAYgC,QAAZ;;AACA,QAAIA,QAAQ,CAACC,OAAb,EAAsB;AACpBnC,MAAAA,KAAK,CACH,gCAAgCN,WAAhC,GAA8C,eAA9C,GAAgED,IAD7D,CAAL;AAGD;AACF,GAzBD;;AA2BA,MAAI,CAACtB,KAAK,CAAC2C,QAAX,EAAqB;AACnB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO;AACL,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAE3C,KAAK,CAAC2C,QAApB;AAA8B,MAAA,YAAY,EAAE1B,YAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAWJ,IAAI,CAAC8B,QAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAY9B,IAAI,CAACY,OAAjB,CAFF,EAGE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,cAFZ;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,WAAW,EAAC,QAJd;AAKE,MAAA,QAAQ,EAAEhB,YALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,EAaE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAED,MAAtB;AAA8B,MAAA,WAAW,EAAEa,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CAHF,CADF;AAqBD;AACF;;AAED,eAAetB,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Navbar from './Navbar';\r\nimport useHttpGet from '../hooks/httpGet';\r\nimport BuyStocks from './BuyStocks';\r\n\r\nfunction Buy(props) {\r\n  // const [stocks] = useHttpGet(\r\n  //   `http://localhost:5000/api/stocks`,\r\n  //   [],\r\n  //   'getting stocks'\r\n  //   );\r\n  const [seconds, setSeconds] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setSeconds(seconds => seconds + 1);\r\n    }, 7000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [stocks] = useHttpGet(\r\n    `http://localhost:5000/api/stocks/${query}`,\r\n    [query, seconds],\r\n    'getting stocks'\r\n  );\r\n  \r\n  \r\n\r\n  const handleChange = event => {\r\n    setQuery(event.target.value);\r\n  };\r\n  const [user] = useHttpGet(\r\n    `http://localhost:5000/api/users/${sessionStorage.getItem('username')}`,\r\n    [],\r\n    'getting user ' + sessionStorage.getItem('username')\r\n  );\r\n  const [stocksOwned] = useHttpGet(\r\n    `http://localhost:5000/api/own/${sessionStorage.getItem('username')}`,\r\n    [],\r\n    'getting stocks Owned for ' + sessionStorage.getItem('username')\r\n  );\r\n\r\n  /**\r\n   * handle the logout sequence when a user clicks on logout on the Navbar.\r\n   * first remove the user from the session, then move handleLogout() up to app.js, then redirect to the home page.\r\n   */\r\n  const handleLogout = () => {\r\n    sessionStorage.removeItem('username');\r\n    props.handleLogout();\r\n    props.history.push('/');\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param {the name of the stock} name 'aapl'\r\n   * @param {the amount wanting to buy} amountToBuy 10\r\n   * @param {the current price of the stock} price_now 172.32\r\n   *\r\n   * If the stock that is being bought is already in the users portfolio, just do an update on the postition,\r\n   * If the stock is not in the users portfolio, create a new stock in the users dashboard.\r\n   */\r\n  const handleBuy = async (name, amountToBuy, price_now) => {\r\n    const dollars = amountToBuy * parseFloat(price_now.replace(/[^0-9.]/g, \"\"));\r\n    const dollarsOnHand = parseFloat(user.dollars.replace(/[^0-9.]/g, \"\"));\r\n    if (amountToBuy < 0) {\r\n      alert(\"You can't buy a negative amount of stocks, silly.\");\r\n      return 'End';\r\n    }\r\n    \r\n    console.log(dollars, dollarsOnHand);\r\n    if(dollars > dollarsOnHand){\r\n      alert(\"You don't have enough money for that, silly.\");\r\n      return 'End';\r\n    }\r\n    //Make new Stock if not owned already\r\n    const stocknamesOwned = [];\r\n    stocksOwned.forEach(stock => {\r\n      stocknamesOwned.push(stock.name);\r\n    });\r\n    if (!stocknamesOwned.includes(name)) {\r\n      \r\n\r\n      await createNewStockInPortfolio(name, amountToBuy, price_now);\r\n      window.location.reload();\r\n      //quit excution of the function after this point.\r\n      return 'hello';\r\n    }\r\n    //update stock if owned already\r\n    let own = {};\r\n      stocksOwned.forEach((stock) => {\r\n        if(stock.name == name){\r\n          own = stock;\r\n        }\r\n      })\r\n    await updateStockInPortfolio(name, amountToBuy, price_now, own);\r\n\r\n    //update the amount of money in the users account\r\n    \r\n      const updateThisToo = {\r\n        username: sessionStorage.getItem('username'),\r\n        dollars: -dollars,\r\n        premium_user: false\r\n      };\r\n      \r\n      \r\n      const myResponse2 = await fetch(\r\n          `http://localhost:5000/api/users/${sessionStorage.getItem('username')}`, {\r\n              method: 'Put',\r\n              mode: 'cors', // no-cors, *cors, same-origin\r\n              cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n              credentials: 'omit', // include, *same-origin, omit\r\n              headers: {\"content-type\":\"application/json\"},\r\n              redirect: 'follow', // manual, *follow, error\r\n              referrerPolicy: 'no-referrer', // no-referrer, *client\r\n              body: JSON.stringify(updateThisToo)\r\n          });\r\n          const jsonData2 = await myResponse2.json();\r\n          console.log(jsonData2);\r\n    window.location.reload();\r\n  };\r\n\r\n  const createNewStockInPortfolio = async (name, amountToBuy, price_now) => {\r\n    console.log('ran handle buy');\r\n    console.log(amountToBuy);\r\n    //make a new owned in order to create data on a new stock with price_bought_at and price_now included.\r\n    const NewOwned = {\r\n      username: sessionStorage.getItem('username'),\r\n      name: name,\r\n      price_bought_at: price_now,\r\n      price_now: price_now,\r\n      amount: amountToBuy\r\n    };\r\n\r\n    const myResponse = await fetch(`http://localhost:5000/api/owns`, {\r\n      method: 'POST',\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'omit', // include, *same-origin, omit\r\n      headers: { 'content-type': 'application/json' },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *client\r\n      body: JSON.stringify(NewOwned)\r\n    });\r\n\r\n    const jsonData = await myResponse.json();\r\n    console.log(jsonData);\r\n    if (jsonData.success) {\r\n      alert(\r\n        'you successfully purchased ' + amountToBuy + ' stock(s) of ' + name\r\n      );\r\n    }\r\n  };\r\n\r\n  const updateStockInPortfolio = async (name, amountToBuy, price_now) => {\r\n    //update stock if owned already\r\n    const updateThis = {\r\n      username: sessionStorage.getItem('username'),\r\n      name: name,\r\n      amount: amountToBuy\r\n    };\r\n\r\n    const myResponse = await fetch(`http://localhost:5000/api/owns`, {\r\n      method: 'Put',\r\n      mode: 'cors', // no-cors, *cors, same-origin\r\n      cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n      credentials: 'omit', // include, *same-origin, omit\r\n      headers: { 'content-type': 'application/json' },\r\n      redirect: 'follow', // manual, *follow, error\r\n      referrerPolicy: 'no-referrer', // no-referrer, *client\r\n      body: JSON.stringify(updateThis)\r\n    });\r\n    const jsonData = await myResponse.json();\r\n    console.log(jsonData);\r\n    if (jsonData.success) {\r\n      alert(\r\n        'you successfully purchased ' + amountToBuy + ' stock(s) of ' + name\r\n      );\r\n    }\r\n  };\r\n\r\n  if (!props.username) {\r\n    return <div></div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <Navbar user={props.username} handleLogout={handleLogout} />\r\n\r\n        <div className='container '>\r\n          <h3>Hello {user.username}</h3>\r\n          <h3>Money: {user.dollars}</h3>\r\n          <input\r\n            type='text'\r\n            className='form-control'\r\n            name='search'\r\n            placeholder='Search'\r\n            onChange={handleChange}\r\n          />\r\n        \r\n        \r\n        \r\n          <BuyStocks buyStocks={stocks} handleClick={handleBuy} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Buy;\r\n"]},"metadata":{},"sourceType":"module"}