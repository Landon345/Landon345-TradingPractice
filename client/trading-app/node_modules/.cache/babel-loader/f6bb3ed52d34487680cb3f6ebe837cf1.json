{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Landon Schlangen\\\\Documents\\\\WebDevelopmentFolders\\\\FullStackApps\\\\TradingPractice\\\\client\\\\trading-app\\\\src\\\\components\\\\Dashboard.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Navbar from './Navbar';\nimport useHttpGet from '../hooks/httpGet';\nimport UserStocks from './UserStocks';\n\nfunction Dashboard(props) {\n  const [stocks] = useHttpGet(`http://localhost:5000/api/userStocks/${props.username}`, [], \"Got user's stocks\");\n  const [user] = useHttpGet(`http://localhost:5000/api/users/${sessionStorage.getItem('username')}`, [], 'getting user ' + sessionStorage.getItem('username'));\n\n  const handleLogout = () => {\n    sessionStorage.removeItem(\"username\");\n    props.handleLogout();\n    props.history.push('/');\n  };\n\n  const handleSell = async (name, amountToSell, amount, price_now) => {\n    console.log(\"ran handle Sell\");\n    console.log(amountToSell);\n\n    if (amount < amountToSell) {\n      alert(\"you can't sell more than you own, silly.\"); //don't allow the amount sold to be higher than the amount of stock owned.\n\n      return \"hello\";\n    }\n\n    const updateThis = {\n      username: sessionStorage.getItem('username'),\n      name: name,\n      amount: -amountToSell\n    };\n    const myResponse = await fetch(`http://localhost:5000/api/owns`, {\n      method: 'Put',\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'omit',\n      // include, *same-origin, omit\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrerPolicy: 'no-referrer',\n      // no-referrer, *client\n      body: JSON.stringify(updateThis)\n    });\n    const jsonData = await myResponse.json();\n    console.log(jsonData); //Update the amount of money that is in the account. \n\n    const dollars = amountToSell * parseFloat(price_now);\n    const updateThisToo = {\n      username: sessionStorage.getItem('username'),\n      dollars: price_now * amount,\n      premium_user: false\n    };\n    const myResponse2 = await fetch(`http://localhost:5000/api/users/${sessionStorage.getItem('username')}`, {\n      method: 'Put',\n      mode: 'cors',\n      // no-cors, *cors, same-origin\n      cache: 'no-cache',\n      // *default, no-cache, reload, force-cache, only-if-cached\n      credentials: 'omit',\n      // include, *same-origin, omit\n      headers: {\n        \"content-type\": \"application/json\"\n      },\n      redirect: 'follow',\n      // manual, *follow, error\n      referrerPolicy: 'no-referrer',\n      // no-referrer, *client\n      body: JSON.stringify(updateThisToo)\n    });\n    const jsonData2 = await myResponse2.json();\n    console.log(jsonData2);\n    window.location.reload();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Navbar, {\n    user: props.username,\n    handleLogout: handleLogout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Money: \", user.dollars), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(UserStocks, {\n    userStock: stocks,\n    handleClick: handleSell,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })));\n}\n\nexport default Dashboard;","map":{"version":3,"sources":["C:/Users/Landon Schlangen/Documents/WebDevelopmentFolders/FullStackApps/TradingPractice/client/trading-app/src/components/Dashboard.jsx"],"names":["React","useEffect","useState","Link","Navbar","useHttpGet","UserStocks","Dashboard","props","stocks","username","user","sessionStorage","getItem","handleLogout","removeItem","history","push","handleSell","name","amountToSell","amount","price_now","console","log","alert","updateThis","myResponse","fetch","method","mode","cache","credentials","headers","redirect","referrerPolicy","body","JSON","stringify","jsonData","json","dollars","parseFloat","updateThisToo","premium_user","myResponse2","jsonData2","window","location","reload"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport Navbar from './Navbar';\r\nimport useHttpGet from '../hooks/httpGet';\r\nimport UserStocks from './UserStocks';\r\n\r\nfunction Dashboard(props) {\r\n  const [stocks] = useHttpGet(`http://localhost:5000/api/userStocks/${props.username}`, [], \"Got user's stocks\");\r\n  const [user] = useHttpGet(\r\n    `http://localhost:5000/api/users/${sessionStorage.getItem('username')}`,\r\n    [],\r\n    'getting user ' + sessionStorage.getItem('username')\r\n  )\r\n  \r\n  const handleLogout = () => {\r\n    sessionStorage.removeItem(\"username\");\r\n    props.handleLogout();\r\n    props.history.push('/');\r\n  }\r\n\r\n  const handleSell = async (name, amountToSell, amount, price_now) => {\r\n    console.log(\"ran handle Sell\");\r\n    console.log(amountToSell);\r\n    if(amount < amountToSell){\r\n      alert(\"you can't sell more than you own, silly.\");\r\n      //don't allow the amount sold to be higher than the amount of stock owned.\r\n      return \"hello\";\r\n    }\r\n    const updateThis = {\r\n      username: sessionStorage.getItem('username'),\r\n      name: name,\r\n      amount: -amountToSell\r\n    };\r\n    \r\n    \r\n    const myResponse = await fetch(\r\n        `http://localhost:5000/api/owns`, {\r\n            method: 'Put',\r\n            mode: 'cors', // no-cors, *cors, same-origin\r\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'omit', // include, *same-origin, omit\r\n            headers: {\"content-type\":\"application/json\"},\r\n            redirect: 'follow', // manual, *follow, error\r\n            referrerPolicy: 'no-referrer', // no-referrer, *client\r\n            body: JSON.stringify(updateThis)\r\n        });\r\n        const jsonData = await myResponse.json();\r\n        console.log(jsonData);\r\n\r\n//Update the amount of money that is in the account. \r\n      const dollars = amountToSell * parseFloat(price_now)\r\n      const updateThisToo = {\r\n        username: sessionStorage.getItem('username'),\r\n        dollars: price_now * amount,\r\n        premium_user: false\r\n      };\r\n      \r\n      \r\n      const myResponse2 = await fetch(\r\n          `http://localhost:5000/api/users/${sessionStorage.getItem('username')}`, {\r\n              method: 'Put',\r\n              mode: 'cors', // no-cors, *cors, same-origin\r\n              cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\r\n              credentials: 'omit', // include, *same-origin, omit\r\n              headers: {\"content-type\":\"application/json\"},\r\n              redirect: 'follow', // manual, *follow, error\r\n              referrerPolicy: 'no-referrer', // no-referrer, *client\r\n              body: JSON.stringify(updateThisToo)\r\n          });\r\n          const jsonData2 = await myResponse2.json();\r\n          console.log(jsonData2);\r\n\r\n        window.location.reload();\r\n  }\r\n\r\n  return(\r\n    <div>\r\n      <Navbar user = {props.username} handleLogout = {handleLogout}/>\r\n      <h3>Money: {user.dollars}</h3>\r\n      <div className=\"container\">\r\n        \r\n        <UserStocks userStock = {stocks} handleClick = {handleSell}/>\r\n      </div>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}