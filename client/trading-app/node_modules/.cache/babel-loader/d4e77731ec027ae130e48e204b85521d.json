{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Landon Schlangen\\\\Documents\\\\WebDevelopmentFolders\\\\FullStackApps\\\\TradingPractice\\\\client\\\\trading-app\\\\src\\\\components\\\\UserStock.jsx\";\nimport React, { useState, useEffect } from 'react';\n\nfunction UserStock(props) {\n  const [amountToSell, setAmountToSell] = useState(0);\n  const {\n    name,\n    price_bought_at,\n    price_now,\n    amount\n  } = props.userStock;\n\n  const calculatePercentageGain = () => {\n    console.log(price_now.toString().slice(1));\n    let boughtAt = parseFloat(price_bought_at.replace(/[^0-9.]/g, \"\"));\n    let nowAt = parseFloat(price_now.replace(/[^0-9.]/g, \"\"));\n    let difference = nowAt - boughtAt;\n    let percentage = \"%\" + (difference / boughtAt * 100).toFixed(2);\n    return percentage;\n  };\n\n  const handleChange = event => {\n    if ([event.target.name] == 'amountToSell') {\n      setAmountToSell(event.target.value);\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"card text-white mb-1\",\n    style: {\n      maxWidth: \"60rem\",\n      backgroundColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"card-header\",\n    style: {\n      backgroundColor: \"forestGreen\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, name), React.createElement(\"div\", {\n    className: \"card-body\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(\"h5\", {\n    className: \"card-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"price bought at: \", price_bought_at, \", price now: \", price_now), React.createElement(\"p\", {\n    className: \"card-text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Amount: \", amount, \", Loss/Gain:  \", calculatePercentageGain())), React.createElement(\"div\", {\n    class: \"input-group mb-3 col-3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"number\",\n    min: \"0\",\n    max: amount,\n    className: \"form-control\",\n    onChange: handleChange,\n    value: amountToSell,\n    name: \"amountToSell\",\n    placeholder: \"Amount to Sell\",\n    \"aria-describedby\": \"basic-addon2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"input-group-append\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: () => props.handleClick(name, amountToSell, amount, price_now),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Sell\"), React.createElement(\"button\", {\n    className: \"btn btn-warning\",\n    onClick: () => props.handleClick(name, amount, amount, price_now),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Sell All\"))));\n}\n\nexport default UserStock;","map":{"version":3,"sources":["C:/Users/Landon Schlangen/Documents/WebDevelopmentFolders/FullStackApps/TradingPractice/client/trading-app/src/components/UserStock.jsx"],"names":["React","useState","useEffect","UserStock","props","amountToSell","setAmountToSell","name","price_bought_at","price_now","amount","userStock","calculatePercentageGain","console","log","toString","slice","boughtAt","parseFloat","replace","nowAt","difference","percentage","toFixed","handleChange","event","target","value","maxWidth","backgroundColor","handleClick"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nfunction UserStock(props){\r\n    const [amountToSell, setAmountToSell] = useState(0);\r\n    const {name, price_bought_at, price_now, amount} = props.userStock;\r\n\r\n    const calculatePercentageGain = () => {\r\n        console.log(price_now.toString().slice(1));\r\n        let boughtAt = parseFloat(price_bought_at.replace(/[^0-9.]/g, \"\"));\r\n        let nowAt = parseFloat(price_now.replace(/[^0-9.]/g, \"\"));\r\n        let difference = nowAt - boughtAt;\r\n        let percentage = \"%\" + (difference/boughtAt * 100).toFixed(2);\r\n        return percentage;\r\n\r\n    }\r\n    const handleChange = event => {\r\n        if ([event.target.name] == 'amountToSell') {\r\n          setAmountToSell(event.target.value);\r\n        } \r\n      };\r\n    return(\r\n        \r\n\r\n        <div className=\"card text-white mb-1\" style={{maxWidth: \"60rem\", backgroundColor}}>\r\n            <div className=\"card-header\" style={{backgroundColor: \"forestGreen\"}}>{name}</div>\r\n            <div className=\"card-body\">\r\n            <h5 className=\"card-title\">price bought at: {price_bought_at}, price now: {price_now}</h5>\r\n            <p className=\"card-text\">Amount: {amount}, Loss/Gain:  {calculatePercentageGain()}</p>\r\n            </div>\r\n            <div class='input-group mb-3 col-3'>\r\n          <input\r\n            type='number'\r\n            min='0'\r\n            max={amount}\r\n            className='form-control'\r\n            onChange={handleChange}\r\n            value={amountToSell}\r\n            name='amountToSell'\r\n            placeholder='Amount to Sell'\r\n            aria-describedby='basic-addon2'\r\n          />\r\n          <div className='input-group-append'>\r\n            <button\r\n              className='btn btn-primary'\r\n              onClick={() => props.handleClick(name, amountToSell, amount, price_now)}\r\n            >\r\n              Sell\r\n            </button>\r\n            <button className=\"btn btn-warning\" onClick={() => props.handleClick(name, amount, amount, price_now)}>\r\n              Sell All\r\n            </button>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UserStock;"]},"metadata":{},"sourceType":"module"}